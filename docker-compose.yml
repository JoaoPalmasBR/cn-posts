services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: joao
      POSTGRES_PASSWORD: joao
      POSTGRES_DB: bd_posts
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app_network

  backend:
    build: ./backend
    container_name: backend_api
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    volumes:
      - ./backend:/app
      - backend_app:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_app
    restart: unless-stopped
    ports:
      - "3000:80" # Mapeia a porta 3000 do host para a porta 80 do container
    environment:
      REACT_APP_API_URL: http://backend:8000 # URL da API backend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
    networks:
      - app_network

volumes:
  postgres_data:
  frontend_node_modules:
  backend_app:

networks:
  app_network:
    driver: bridge
